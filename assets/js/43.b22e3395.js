(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{209:function(e,t,n){"use strict";n.r(t);var o=n(0),s=Object(o.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),n("p",[e._v("Hello~亲爱的观众老爷们大家好！国庆中秋长假快放完了，是时候收拾心（ti）情（zhong）好好学习与工作啦。这次为大家带来的是两个好用 API 的介绍，其实也是偷懒神器。")]),e._v(" "),n("p",[e._v("根据 "),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FElement%2FscrollIntoView",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN"),n("OutboundLink")],1),e._v("的描述，"),n("code",[e._v("Element.scrollIntoView()")]),e._v("方法让当前的元素滚动到浏览器窗口的可视区域内。")]),e._v(" "),e._m(1),e._v(" "),n("p",[e._v("因而再有什么回到顶部、去到置顶位置和键盘弹出挡住输入框之类的需求，都可以简单解决了。")]),e._v(" "),n("p",[e._v("然而，面对好用的 API，前端们第一个反映都是，看兼容性！")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),n("p",[e._v("看到一片黄黄绿绿的，基本可以安心，不支持的只是某个属性的取值而已，下面会有介绍~")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),n("p",[e._v("先介绍"),n("code",[e._v("scrollIntoView")]),e._v(",使用起来其实很简单，获取某个元素后，直接调用"),n("code",[e._v("scrollIntoViewIfNeeded()")]),e._v("即可，简单的"),n("code",[e._v("demo")]),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fljf0113.github.io%2FscrollIntoView-and-scrollIntoView%2FscrollIntoView-1",target:"_blank",rel:"noopener noreferrer"}},[e._v("点这就好"),n("OutboundLink")],1),e._v("，点一下侧边的小绿块，页面就会滚上去。"),n("code",[e._v("demo")]),e._v("代码大概长这样：")]),e._v(" "),e._m(9),e._m(10),e._v(" "),n("p",[e._v("先说"),n("code",[e._v("Boolean")]),e._v("型参数，顾名思义，参数可以使"),n("code",[e._v("true")]),e._v("和"),n("code",[e._v("false")]),e._v("。如果为"),n("code",[e._v("true")]),e._v("，元素的顶端将和其所在滚动区的可视区域的顶端对齐。若为"),n("code",[e._v("false")]),e._v("，元素的底端将和其所在滚动区的可视区域的底端对齐。简单的例子"),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fljf0113.github.io%2FscrollIntoView-and-scrollIntoView%2FscrollIntoView-2",target:"_blank",rel:"noopener noreferrer"}},[e._v("可以点这里"),n("OutboundLink")],1),e._v("。主要代码如下：")]),e._v(" "),e._m(11),e._m(12),e._v(" "),e._m(13),e._v(" "),n("p",[e._v("另一个选项是"),n("code",[e._v("behavior")]),e._v(",MDN上给出三个可取的值，分别是"),n("code",[e._v("auto")]),e._v("、"),n("code",[e._v("instant")]),e._v("与"),n("code",[e._v("smooth")]),e._v("。这个选项决定页面是如何滚动的，实测"),n("code",[e._v("auto")]),e._v("与"),n("code",[e._v("instant")]),e._v("都是瞬间跳到相应的位置，查阅"),n("code",[e._v("W3C")]),e._v('后发现了这么一句:"The instant value of scroll-behavior was renamed to auto."。因而基本可以确定两者表现是一致的。而'),n("code",[e._v("smooth")]),e._v("就是有动画的过程，可惜的是之前提及兼容性时说过，黄色其实不支持某个属性，就是不支持"),n("code",[e._v("behavior")]),e._v("取值为"),n("code",[e._v("smooth")]),e._v("。而且，实测了IE及移动端的UC浏览器后发现，它们根本就不支持"),n("code",[e._v("Object")]),e._v("型参数，因而在调用"),n("code",[e._v("scrollIntoView({...})")]),e._v("时，只有默认的结果，即"),n("code",[e._v("scrollIntoView(true)")]),e._v("。简单的例子"),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fljf0113.github.io%2FscrollIntoView-and-scrollIntoView%2FscrollIntoView-3",target:"_blank",rel:"noopener noreferrer"}},[e._v("看这里"),n("OutboundLink")],1),e._v("，如果想体验"),n("code",[e._v("smooth")]),e._v("的效果，需要使用Chrome或者Firefox哦！主要代码如下：")]),e._v(" "),e._m(14),e._m(15),e._v(" "),e._m(16),e._v(" "),n("p",[n("code",[e._v("scrollIntoViewIfNeeded")]),e._v("可以接受一个"),n("code",[e._v("Boolean")]),e._v("型参数，和"),n("code",[e._v("scrollIntoView")]),e._v("不同，"),n("code",[e._v("true")]),e._v("为默认值，但不是滚动到顶部，而是让元素在可视区域中居中对齐；"),n("code",[e._v("false")]),e._v("时元素可能顶部或底部对齐，视乎元素靠哪边更近。简单的例子"),n("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fljf0113.github.io%2FscrollIntoView-and-scrollIntoView%2FscrollIntoViewIfNeeded",target:"_blank",rel:"noopener noreferrer"}},[e._v("可以点这里"),n("OutboundLink")],1),e._v("。大致代码如下：")]),e._v(" "),e._m(17),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),n("p",[e._v("感谢各位看官大人看到这里~希望本文对你有所帮助，记得使用一下这两个API哦！")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"scrollintoview-与-scrollintoviewifneeded-api-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scrollintoview-与-scrollintoviewifneeded-api-介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" scrollIntoView 与 scrollIntoViewIfNeeded API 介绍")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("而"),t("code",[this._v("Element.scrollIntoViewIfNeeded（）")]),this._v("方法也是用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。但如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动。此方法是标准的Element.scrollIntoView()方法的专有变体。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("先看"),t("code",[this._v("scrollIntoView")]),this._v("的：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/6/fe81e231a974d45ac878b2c0c63ecb5d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("之后看看"),t("code",[this._v("scrollIntoViewIfNeeded")]),this._v("：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/6/0f1344a4895d70a52954ed92f58ffcb9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("IE")]),this._v("和"),t("code",[this._v("FireFox")]),this._v("全红，如果"),t("code",[this._v("PC")]),this._v("端想用的话，基本只能内部项目了，略为可惜。但移动端还是绿悠悠的，基本都OK，可以安心使用~")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("由于本文是介绍向~因而每个属性我都写了点小"),t("code",[this._v("demo")]),this._v("，点进去就可以体验一下哦！")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"scrollintoview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scrollintoview","aria-hidden":"true"}},[this._v("#")]),this._v(" scrollIntoView")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<body>\n    <div class=\"chunk\"></div>\n    <div class=\"btn\">click</div>\n    <script>\n    const btn = document.querySelector('.btn');\n    const test = document.querySelector('.chunk');\n    btn.addEventListener('click', function() {\n      test.scrollIntoView();\n    })\n    <\/script>\n</body>复制代码\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("是不是很简单~不过可能有同学就有疑问了，这不就和锚点定位一样吗？感觉毫无意义啊！先别急，当你调用"),n("code",[e._v("scrollIntoView")]),e._v("的时候，其实是可以传参数进去的。"),n("code",[e._v("scrollIntoView")]),e._v("只接受一个参数，但接受两种类型的参数，分别是"),n("code",[e._v("Boolean")]),e._v("型参数和"),n("code",[e._v("Object")]),e._v("型参数。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<body>\n    <div class=\"chunk\"></div>\n    <div class=\"btn-top\">up</div>\n    <div class=\"btn-bottom\">down</div>\n    <script>\n    const up = document.querySelector('.btn-top');\n    const down = document.querySelector('.btn-bottom');\n    const test = document.querySelector('.chunk');\n    up.addEventListener('click', function() {\n      test.scrollIntoView(true);\n    });\n    down.addEventListener('click', function() {\n      test.scrollIntoView(false);\n    });\n    <\/script>\n</body>复制代码\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如你所见到的，当传入参数为分别为"),t("code",[this._v("true")]),this._v("与"),t("code",[this._v("false")]),this._v("时，当点击右侧的按钮时，红色的"),t("code",[this._v("div")]),this._v("会贴近可视区域的顶部或底部。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("之后是"),n("code",[e._v("Object")]),e._v("型参数，这个对象有两个选项，也就是对象里面的"),n("code",[e._v("key")]),e._v("。"),n("code",[e._v("block")]),e._v("与之前的"),n("code",[e._v("Boolean")]),e._v("型参数一致，不过值不再是"),n("code",[e._v("true")]),e._v("和"),n("code",[e._v("false")]),e._v("，是更语义化的"),n("code",[e._v("start")]),e._v("和"),n("code",[e._v("end")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<body>\n    <div class=\"chunk\"></div>\n    <div class=\"btn-top\">up</div>\n    <div class=\"btn-bottom\">down</div>\n    <script>\n    const up = document.querySelector('.btn-top');\n    const down = document.querySelector('.btn-bottom');\n    const test = document.querySelector('.chunk');\n    up.addEventListener('click', function() {\n      test.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth'\n      });\n    });\n    down.addEventListener('click', function() {\n      test.scrollIntoView({\n        block: 'end',\n        behavior: 'smooth'\n      });\n    });\n    <\/script>\n</body>复制代码\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"scrollintoviewifneeded"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scrollintoviewifneeded","aria-hidden":"true"}},[this._v("#")]),this._v(" scrollIntoViewIfNeeded")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("介绍完"),n("code",[e._v("scrollIntoView")]),e._v("，是时候介绍一下它的变体"),n("code",[e._v("scrollIntoViewIfNeeded")]),e._v("了。两者主要区别有两个。首先是"),n("code",[e._v("scrollIntoViewIfNeeded")]),e._v("是比较懒散的，如果元素在可视区域，那么调用它的时候，页面是不会发生滚动的。其次是"),n("code",[e._v("scrollIntoViewIfNeeded")]),e._v("只有"),n("code",[e._v("Boolean")]),e._v("型参数，也就是说，都是瞬间滚动，没有动画的可能了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<body>\n    <div class=\"chunk\"></div>\n    <div class=\"scrollIntoView\">scrollIntoView top</div>\n    <div class=\"scrollIntoViewIfNeeded-top\">scrollIntoViewIfNeeded top</div>\n    <div class=\"scrollIntoViewIfNeeded-bottom\">scrollIntoViewIfNeeded botom</div>\n    <script>\n    const scrollIntoView = document.querySelector('.scrollIntoView');\n    const scrollIntoViewIfNeededTop = document.querySelector('.scrollIntoViewIfNeeded-top');\n    const scrollIntoViewIfNeededBottom = document.querySelector('.scrollIntoViewIfNeeded-bottom');\n    const test = document.querySelector('.chunk');\n    scrollIntoView.addEventListener('click', function() {\n      test.scrollIntoView(true);\n    });\n    scrollIntoViewIfNeededTop.addEventListener('click', function() {\n      test.scrollIntoViewIfNeeded(true);\n    });\n    scrollIntoViewIfNeededBottom.addEventListener('click', function() {\n      test.scrollIntoViewIfNeeded(false);\n    });\n    <\/script>\n</body>复制代码\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("如文档所说，当红色的"),n("code",[e._v("div")]),e._v("完全在可视区域的情况下，调用"),n("code",[e._v("scrollIntoView()")]),e._v("是会发生滚动，而调用"),n("code",[e._v("scrollIntoViewIfNeeded()")]),e._v("则不会。而我实践后发现了一些文档没有的细节。当元素处于可视区域，但不是全部可见的情况下，调用"),n("code",[e._v("scrollIntoViewIfNeeded()")]),e._v("时，无论参数是"),n("code",[e._v("true")]),e._v("还是"),n("code",[e._v("false")]),e._v("，都会发生滚动，而且效果是滚动到元素与可视区域顶部或底部对齐，视乎元素离哪端更近。这个大家需要注意一下~")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("其实这个API并不是必须的，有很多其他方法可以达到它的效果。然而在条件许可的情况下，使用一下是能节省下好多的"),t("code",[this._v("JS")]),this._v("代码或是一堆锚点，还是很爽的。")])}],!1,null,null,null);t.default=s.exports}}]);