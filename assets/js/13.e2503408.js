(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{179:function(e,r,_){"use strict";_.r(r);var v=_(0),c=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,r=e.$createElement,_=e._self._c||r;return _("div",{staticClass:"content"},[_("p",[e._v("8ecs 主机提示目前运行的phpmyadmin提示有漏洞")]),e._v(" "),_("p",[e._v("尝试换成docker来跑phpmyadmin")]),e._v(" "),_("h1",{attrs:{id:"ecs-下安装docker"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ecs-下安装docker","aria-hidden":"true"}},[e._v("#")]),e._v(" ECS 下安装docker")]),e._v(" "),_("p",[e._v("Docker要求Lunix内核版本至少是3.10")]),e._v(" "),_("p",[e._v("而centos6.8 内核不符合要求")]),e._v(" "),_("div",{staticClass:"language-s extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("# uname -r\n2.6.32-642.13.1.el6.x86_64\n")])])]),_("p",[e._v("看来必须使用centos7.2 或者ubuntu , 考虑到centos更稳定, 将实例镜像还是用centos7.2 64位 内核版本 "),_("code",[e._v("3.10.0-514.6.2.el7.x86_64")])]),e._v(" "),_("h1",{attrs:{id:"安装dockser"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安装dockser","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装dockser")]),e._v(" "),_("p",[e._v("ecs centos7.2 下默认阿里源直接安装\n"),_("code",[e._v("yum install docker")])]),e._v(" "),_("p",[e._v("启动docker服务\n"),_("code",[e._v("service docker start")])]),e._v(" "),_("p",[e._v("docker pull name:tag  获取镜像:版本\ndocker images 查看本机有哪些镜像")]),e._v(" "),_("p",[e._v("docker 每次默认都要去访问官方镜像仓库"),_("code",[e._v("docker.io")]),e._v(" 还好目前没有被墙  "),_("code",[e._v("hub.docker.com")])]),e._v(" "),_("p",[e._v("拉取示例镜像"),_("code",[e._v("hello-world")]),e._v(" "),_("code",[e._v("docker pull hello-world")])]),e._v(" "),_("h2",{attrs:{id:"运行hello-world-镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行hello-world-镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 运行hello-world 镜像")]),e._v(" "),_("p",[e._v("运行docker镜像 -- docker容器")]),e._v(" "),_("p",[_("code",[e._v("docker run [opt] image:tag [command] [arg]")])]),e._v(" "),_("p",[e._v("运行一个镜像, 后面可以跟命令, 进行运行起来后执行该命令和arg参数...")]),e._v(" "),_("p",[_("code",[e._v("docker run hello-world")])]),e._v(" "),_("p",[e._v("该命令的执行过程")]),e._v(" "),_("ol",[_("li",[e._v("docker client 连接到docker服务")]),e._v(" "),_("li",[e._v("docker服务拉取镜像 ,把镜像从网络拉取到本地 (docker hub 就是 docker仓库)")]),e._v(" "),_("li",[e._v("创建新容器来运行程序, 程序运行生成输出")]),e._v(" "),_("li",[e._v("docker服务将容器中生成的输出流传输给docker client, docker client 输出到终端")])]),e._v(" "),_("h2",{attrs:{id:"运行nginx镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行nginx镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 运行nginx镜像")]),e._v(" "),_("p",[e._v("hello-world是前台运行, 运行完毕即退出\n而nginx需要持久运行, 需要后台运行 , 于是它是个持久运行的容器")]),e._v(" "),_("p",[e._v("进入容器内部")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("拉镜像 "),_("code",[e._v("https://c.163.com/")]),e._v(" 镜像中心, 搜nginx , 鲸鱼标记表示 docker官网镜像\n"),_("code",[e._v("docker pull hub.c.163.com/library/nginx:latest")])])]),e._v(" "),_("li",[_("p",[e._v("容器中运行镜像\n"),_("code",[e._v("docker run hub.c.163.com/library/nginx")]),e._v("   //这种是前台方式运行\n"),_("code",[e._v("docker ps")]),e._v("     //在另外一个终端查看,   查看当前再运行的容器, 可见容器在运行\n//在前台运行的容器, CTRL + C 可以终止")])])]),e._v(" "),_("p",[e._v("后台运行nginx 才是正确的运行方法 "),_("code",[e._v("-d 后台运行, 且打印容器ID")])]),e._v(" "),_("div",{staticClass:"language-s extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("# docker run -d hub.c.163.com/library/nginx\n074c16d50efdc25b4eb4dff8b9323c7c7ba5c024b6c57f2b7f59c1a370411504\n")])])]),_("ol",{attrs:{start:"3"}},[_("li",[e._v("进入到容器")])]),e._v(" "),_("p",[e._v("docker exec 在一个运行的指定ID容器中运行命令")]),e._v(" "),_("p",[e._v("参数:")]),e._v(" "),_("p",[e._v("-i 输入模式, 即使容器是前台阻塞模式 , 也能输入\n-t 分配控制台")]),e._v(" "),_("p",[_("code",[e._v("docker exec -it 074c16d5 bash")])]),e._v(" "),_("p",[_("code",[e._v("which nginx")]),e._v("  //查看nginx命令位置\n"),_("code",[e._v("ps -ef")]),e._v("    //可见nginx pid 为1,  worker进程也都很小")]),e._v(" "),_("p",[_("code",[e._v("docker attach myadmin")]),e._v(" //连接到该容器, 交互方式启动的容器才能attach\n//attach 相当于是给容器在运行的环境中加入一个终端, 让我们进行操作\n//而交互方式启动的容器本身就有终端, attach 就是让我们能使用这个终端\n//如果是后台方式启动的容器, 本身环境中就是没有终端的, attach也就不起作用了\n//后台启动方式的话, 使用-it参数 , 然后运行"),_("code",[e._v("sh")]),e._v(" 就能连接,  因为几乎所有的容器内部还是linux环境 都有sh, 所以这个连接到容器的方法最通用\n//但attach 是连接到容器的程序运行的shell ,  exec 是一个新的shell\n"),_("code",[e._v("docker exec -it myadmin sh")])]),e._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[_("p",[e._v("停止容器\n"),_("code",[e._v("docker stop 074c16d5")])])]),e._v(" "),_("li",[_("p",[e._v("访问docker网络")])])]),e._v(" "),_("p",[e._v("bridge模式: 独立网络模式 , 容器内有自己的ip和端口, 访问时需要将容器内的端口和主机端口进行映射才能访问")]),e._v(" "),_("p",[e._v("host模式: 使用宿主机的网络, 容器直接使用主机的网卡")]),e._v(" "),_("p",[e._v("none: 无网络模式")]),e._v(" "),_("p",[e._v("比如这个例子中的nginx 镜像的容器服务端口是80\n"),_("code",[e._v("docker --help")]),e._v(" "),_("code",[e._v("-p --publish list")]),e._v(" 开放端口到主机, 主机端口:容器端口\n"),_("code",[e._v("-P")]),e._v(" 开放本机的随机端口分别 映射到容器的每个服务端口")]),e._v(" "),_("p",[_("code",[e._v("docker run -d -p 8080:80 hub.c.163.com/library/nginx")])]),e._v(" "),_("p",[e._v("主机的8080端口映射为容器的80端口,访问"),_("code",[e._v("http://db-bak.router:8080/")])]),e._v(" "),_("p",[_("code",[e._v("docker run -d -P hub.c.163.com/library/nginx")])]),e._v(" "),_("p",[e._v("随机端口映射"),_("code",[e._v("0.0.0.0:32768->80/tcp")])]),e._v(" "),_("hr"),e._v(" "),_("h1",{attrs:{id:"制作自己的镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#制作自己的镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 制作自己的镜像")]),e._v(" "),_("p",[e._v("dockerfile  制作镜像的文件")]),e._v(" "),_("p",[e._v("docker build  执行docker file中的动作")]),e._v(" "),_("p",[e._v("以为例 "),_("code",[e._v("press")]),e._v(" 框架为例 , jpress 是一个java语言编写的类似wordpress的博客系统 , 整个应用就是一个war文件包\n需要tomcat环境")]),e._v(" "),_("ol",[_("li",[e._v("下载jpress, 下载基础镜像")])]),e._v(" "),_("p",[e._v("创建目录 "),_("code",[e._v("demo-jpress")]),e._v(" , 制作镜像的操作都在该目录下进行")]),e._v(" "),_("p",[_("code",[e._v("wget https://github.com/JpressProjects/jpress/blob/master/wars/jpress-web-newest.war")])]),e._v(" "),_("p",[e._v("c.163.com 找基础镜像, tomcat , tomcat是依赖jdk的, 所以这个镜像里面肯定是包括jdk的, 这个镜像有300度M")]),e._v(" "),_("p",[_("code",[e._v("docker pull hub.c.163.com/library/tomcat:latest")])]),e._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[e._v("Dockerfile")])]),e._v(" "),_("p",[e._v("基础镜像, 将jpress应用拷贝到对应目录,  这个目录我们要在镜像下载页面中找说明文档, 确定地址")]),e._v(" "),_("blockquote",[_("p",[_("code",[e._v("Dockerfile")])])]),e._v(" "),_("div",{staticClass:"language-s extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("from hub.c.163.com/library/tomcat\nMAINTAINER hendry xxx@163.com\nCOPY jpress.war /usr/local/tomcat/webapps\n")])])]),_("ol",{attrs:{start:"3"}},[_("li",[e._v("docker build .")])]),e._v(" "),_("p",[_("code",[e._v("docker build .")]),e._v(" //点表示Dockerfile存放目录")]),e._v(" "),_("p",[e._v("命令运行时会列出每一步详细信息,\n成功后用"),_("code",[e._v("docker images")]),e._v(" 查看一下 , 没有名字, 只有image id")]),e._v(" "),_("p",[e._v("给镜像指定名字和tag\n"),_("code",[e._v("docker build -t jpress:latest .")])]),e._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[e._v("运行自定义镜像\n还是要先去tomcat镜像下载页面查看默认服务端口 , 8080")])]),e._v(" "),_("p",[e._v("运行时进行映射")]),e._v(" "),_("p",[_("code",[e._v("docker run -d -p 8080:8080 jpress")])]),e._v(" "),_("p",[e._v("这样更方便查看错误消息\n"),_("code",[e._v("docker run -it --rm -p 8888:8080 jpress")]),e._v("   //但这样运行后, 容器就被删除, 方便调试")]),e._v(" "),_("p",[_("code",[e._v("docker run -it --name jpress -p 88:8080 jpress")]),e._v("  // 去掉 --rm , --name 指定容器名称, 方便以后重新启动该容器")]),e._v(" "),_("p",[e._v("下次启动 "),_("code",[e._v("docker start jpress")])]),e._v(" "),_("h1",{attrs:{id:"删除镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 删除镜像")]),e._v(" "),_("p",[_("code",[e._v("docker rmi a8")]),e._v("\n提示错误 , 这个镜像有容器使用,  且列出了容器id, 那么\n要先删除该容器\n"),_("code",[e._v("docker rm 246b2feae8cb")]),e._v(" 然后再次运行上面的删除镜像命令")]),e._v(" "),_("h1",{attrs:{id:"mysql-镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql-镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" mysql 镜像")]),e._v(" "),_("p",[e._v("docker pull mysql")]),e._v(" "),_("p",[e._v("镜像的页面查看怎么传参启动")]),e._v(" "),_("p",[_("code",[e._v("docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag")])]),e._v(" "),_("p",[e._v("-e 指定环境变量, 不同的镜像, 不同的参数\n--name some-mysql  是给容器取名字 , 方便其他的容器来连接 , 这里测试就不指定这个参数了\n-e MYSQL_DATABASE=jpress , 在启动的时候创建该数据库")]),e._v(" "),_("p",[e._v("docker run -d -e MYSQL_ROOT_PASSWORD=000000 -e MYSQL_DATABASE=jpress -p 3306:3306 mysql")]),e._v(" "),_("p",[_("code",[e._v("http://db-bak.router:8080/jpress/install/step2")]),e._v("\njpress 安装的时候提示数据库主机 , 因为容器是独立于主机无法直接访问 , 要通过主机ip的3306端口才能访问 "),_("code",[e._v("172.19.174.164")])]),e._v(" "),_("p",[_("code",[e._v("docker restart 38c948800818")])]),e._v(" "),_("h1",{attrs:{id:"phpmyadmin"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#phpmyadmin","aria-hidden":"true"}},[e._v("#")]),e._v(" phpmyadmin")]),e._v(" "),_("p",[_("code",[e._v("docker pull phpmyadmin/phpmyadmin")]),e._v("   //从hub.docker.com下载 , phpmyadmin 官方镜像")]),e._v(" "),_("p",[e._v("//启动数据库\ndocker run --name test-db-server -e MYSQL_ROOT_PASSWORD=000000 -e MYSQL_DATABASE=jpress -p 3306:3306 -d mysql")]),e._v(" "),_("p",[e._v("//如果phpmyadmin 和 数据库在同一个容器内运行的话 , 可以指定--link mysql_db_server:db 来指定数据库服务器, 但是我们这里是在不同的容器里\n// 因此 相对phpmyadmin来说数据库属于  "),_("code",[e._v("external server")]),e._v(" ,    本机上的不同的容器之间可以使用本地ip来进行访问, 比如 "),_("code",[e._v("192.168.0.2")]),e._v("\n// 但不能是127.0.0.1 或 localhost 因为他们表示的容器本身地址 , 容器之间通讯就好像是在一个局域网内, 用内网地址")]),e._v(" "),_("p",[_("code",[e._v("docker run --name myadmin -it --rm -e PMA_HOST=172.19.174.164 -p 3307:80 phpmyadmin/phpmyadmin")])]),e._v(" "),_("p",[e._v("这样当我们访问3307 端口就能访问到phpmyadmin 对数据库的操作")]),e._v(" "),_("h1",{attrs:{id:"重新启动已有的容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重新启动已有的容器","aria-hidden":"true"}},[e._v("#")]),e._v(" 重新启动已有的容器")]),e._v(" "),_("p",[e._v("在Docker中重新启动已经停止的容器")]),e._v(" "),_("p",[_("code",[e._v("docker ps -a")]),e._v(" //查看容器列表,包括停止的容器\n"),_("code",[e._v("docker start myadmin")]),e._v("  //启动前面命名为myadmin的容器\n"),_("code",[e._v("docker attach myadmin")]),e._v(" //连接到该容器, 交互方式启动的容器才能attach\n//attach 相当于是给容器在运行的环境中加入一个终端, 让我们进行操作\n//而交互方式启动的容器本身就有终端, attach 就是让我们能使用这个终端\n//如果是后台方式启动的容器, 本身环境中就是没有终端的, attach也就不起作用了\n//后台启动方式的话, 使用-it参数 , 然后运行"),_("code",[e._v("sh")]),e._v(" 就能连接,  因为几乎所有的容器内部还是linux环境 都有sh, 所以这个连接到容器的方法最通用\n//但attach 是连接到容器的程序运行的shell ,  exec 是一个新的shell\n"),_("code",[e._v("docker exec -it myadmin sh")])]),e._v(" "),_("h1",{attrs:{id:"运行镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 运行镜像")]),e._v(" "),_("p",[e._v("运行已有的容器, 命令是   "),_("code",[e._v("docker start 容器名")]),e._v(" 或 "),_("code",[e._v("docker restart 容器名")])]),e._v(" "),_("p",[e._v("运行镜像, 命令\n"),_("code",[e._v("docker run [参数] imageName [命令 [命令参数]]")])]),e._v(" "),_("p",[e._v("常用的参数有")]),e._v(" "),_("p",[e._v("--rm // 运行镜像后,  删除容器\n-it // -i 输入模式, 即使容器是前台阻塞模式 , 也能输入 ; -t 分配控制台\n-p  // 端口映射  主机端口:容器内端口\n-d  // 后台运行\n--name  // 指定容器名字")]),e._v(" "),_("p",[e._v("且后面还能指定容器启动后运行什么命令")]),e._v(" "),_("p",[e._v("对于有的应用, 不需要看日志, 程序本身也不会对文件进行修改的, 比如phpmyadmin ,")]),e._v(" "),_("p",[e._v("调试的时候就用 "),_("code",[e._v("docker run -it --rm")]),e._v(" , 就是说这样的容器不需要保存, 退出就删除")]),e._v(" "),_("p",[e._v("调试完毕, 如果没有问题的话, 就放到后台运行 , 且给容器命名 那么就用参数 "),_("code",[e._v("docker run --name myadmin -d")])]),e._v(" "),_("p",[e._v("给容器命名的目的有两个")]),e._v(" "),_("ol",[_("li",[e._v("方便以后再次用相同的命令来启动该容器")]),e._v(" "),_("li",[e._v("容器名可提供给其他程序使用")])]),e._v(" "),_("p",[e._v("是否后台运行")]),e._v(" "),_("ol",[_("li",[e._v("调试的时候 肯定是不会后台运行的 , 调试 "),_("code",[e._v("-it --rm")])]),e._v(" "),_("li",[e._v("有的应用, 如果要实时查看日志 也不要后台运行")])]),e._v(" "),_("p",[e._v("另外如果应用需要修改本地文件,  那么就要记得给容器命名, 且不要用 --rm 参数")]),e._v(" "),_("h1",{attrs:{id:"aliyun-ecs-上使用docker"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aliyun-ecs-上使用docker","aria-hidden":"true"}},[e._v("#")]),e._v(" aliyun ECS 上使用docker")]),e._v(" "),_("p",[e._v("ECS centos 7.2 64位  内核低了的话 无法装docker")]),e._v(" "),_("p",[e._v("另外如果使用yum 安装的话, docker版本比较低 ,")]),e._v(" "),_("p",[e._v("所以, 如果已有docker先卸载")]),e._v(" "),_("p",[_("code",[e._v("yum erase docker docker-client docker-common")])]),e._v(" "),_("p",[e._v("安装docker")]),e._v(" "),_("p",[_("code",[e._v("curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -")])]),e._v(" "),_("p",[e._v("阿里docker主页:  "),_("code",[e._v("https://dev.aliyun.com/search.html")])]),e._v(" "),_("p",[e._v("使用阿里云Docker镜像加速:\nhttp://warjiang.github.io/devcat/2016/11/28/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/")]),e._v(" "),_("p",[e._v("如何使用Docker加速器, centos 7 , 其他版本见阿里docker加速器后台"),_("code",[e._v("https://cr.console.aliyun.com/?spm=5176.100239.blogcont29941.13.czCHyc#/accelerator")])]),e._v(" "),_("p",[e._v("登陆阿里docker加速器后台后, 会分配一个加速地址, 比如"),_("code",[e._v("https://3n5cxm7b.mirror.aliyuncs.com")]),e._v(" 这个是系统分配的加速地址, 每个用户不同")]),e._v(" "),_("p",[e._v("您可以通过修改daemon配置文件"),_("code",[e._v("/etc/docker/daemon.json")]),e._v("来使用加速器：")]),e._v(" "),_("div",{staticClass:"language-s extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('sudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-\'EOF\'\n{\n  "registry-mirrors": ["https://3n5cxm7b.mirror.aliyuncs.com"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n')])])]),_("h1",{attrs:{id:"使用阿里镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用阿里镜像","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用阿里镜像")]),e._v(" "),_("p",[_("code",[e._v("https://help.aliyun.com/knowledge_detail/52225.html")])]),e._v(" "),_("p",[e._v("docker 就是为了提供一致的环境, 但我们可以把已经配置好的硬盘做成镜像,  然后其他的ECS主机直接使用我们已经保存的镜像即可")]),e._v(" "),_("p",[e._v("有了这样的镜像, 那么docker镜像其实就没有什么意义了 ? 因为我们可以在一台机器上配置 , 然后把镜像分发下去")]),e._v(" "),_("p",[e._v("我们可以把docker + 阿里镜像结合起来使用")]),e._v(" "),_("h1",{attrs:{id:"faq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#faq","aria-hidden":"true"}},[e._v("#")]),e._v(" FAQ")]),e._v(" "),_("h2",{attrs:{id:"运行容器排错"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行容器排错","aria-hidden":"true"}},[e._v("#")]),e._v(" 运行容器排错")]),e._v(" "),_("p",[e._v("在上面的demo-jpress中 , 遇到错误"),_("code",[e._v("java.lang.IllegalArgumentException: java.util.zip.ZipException: error in opening zip file")])]),e._v(" "),_("p",[e._v("提示zip解压错误, 踩坑不少: 开始的时候以为是环境的问题, 于是从163的docker源换到阿里的docker源, 从阿里源下载下来的tomcat 镜像确定是官方镜像")]),e._v(" "),_("p",[e._v("但依然是这个错误, 后来才看到有少数人也遇到过这样的问题, 最后找到原因是"),_("code",[e._v("war")]),e._v("文件不完整.  结果比对了github上的文件大小和我们实际的文件大小, 果然就是这个原因.")]),e._v(" "),_("p",[e._v("结果从香港vps上下载这个war文件然后scp到测试的docker机器上, 问题解决..")]),e._v(" "),_("p",[e._v("看来以后从github上下载一定要注意文件是否完整, 当前的网络封锁的各种问题都出来了")])])}],!1,null,null,null);r.default=c.exports}}]);