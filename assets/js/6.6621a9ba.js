(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{172:function(e,t,v){"use strict";v.r(t);var _=v(0),i=Object(_.a)({},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("div",{staticClass:"content"},[e._m(0),e._v(" "),v("p",[e._v("文档, 但需要注意的是老版本的 doc 文档和新版本的 service 的文档并不是完全一样")]),e._v(" "),v("p",[e._v("老版本看起来介绍更详细, 而新版本 9.0 文档 Service 章节更注重对 Service 的理解, 更注重在什么时候用哪种服务")]),e._v(" "),e._m(1),e._v(" "),v("p",[e._v("还有一种是谷歌官方的中文版本文档, 但反而质量不高因为它都是机器翻译出来的, 不是结合上下文的文档翻译有的地方不知所云")]),e._v(" "),v("p",[e._v("另外视频资料里面对 service 的介绍很多地方不如文档讲的透彻, 要么自己阅读英文原版文档并翻译中文")]),e._v(" "),v("p",[e._v("要么找到别人已经翻译过的中文文档, 但翻译也有优劣, 这里有篇 9.0 以前的文档翻译的还不错")]),e._v(" "),e._m(2),e._v(" "),v("p",[e._v("参考资源")]),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),v("hr"),e._v(" "),v("p",[e._v("onStartCommand()：")]),e._v(" "),v("p",[e._v("当其他组件调用 startService()方法请求启动 Service 时，该方法被回调。一旦 Service 启动，它会在后台独立运行。当 Service 执行完以后，需调用 stopSelf() 或 stopService()方法停止 Service。（若您只希望 bind Service，则无需调用这些方法）")]),e._v(" "),v("p",[e._v("onBind()：")]),e._v(" "),v("p",[e._v("当其他组件调用 bindService()方法请求绑定 Service 时，该方法被回调。该方法返回一个 IBinder 接口，该接口是 Service 与绑定的组件进行交互的桥梁。若 Service 未绑定其他组件，该方法应返回 null。")]),e._v(" "),v("p",[e._v("onCreate()：")]),e._v(" "),v("p",[e._v("当 Service 第一次创建时，回调该方法。该方法只被回调一次，并在 onStartCommand() 或 onBind()方法被回调之前执行。若 Service 处于运行状态，该方法不会回调。")]),e._v(" "),v("p",[e._v("onDestroy()：")]),e._v(" "),v("p",[e._v("当 Service 被销毁时回调，在该方法中应清除一些占用的资源，如停止线程、接触绑定注册的监听器或 broadcast receiver 等。该方法是 Service 中的最后一个回调。")]),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),v("p",[e._v("会调用到的生命周期方法")]),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),v("hr"),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),v("p",[e._v("在上面的生命周期方法中更重要的是理解两种不同启动方式下调用不同的生命周期方法")]),e._v(" "),v("p",[e._v("毕竟两种不同的服务启动方式, 也对应着两种不同功能的服务类型")]),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),e._m(34),e._v(" "),e._m(35),e._v(" "),e._m(36),e._v(" "),e._m(37),e._v(" "),v("ul",[v("li",[v("p",[v("a",{attrs:{href:"https://developer.android.com/reference/android/app/Service.html#START_NOT_STICKY",target:"_blank",rel:"noopener noreferrer"}},[v("code",[e._v("START_NOT_STICKY")]),v("OutboundLink")],1),e._v("：该返回值表示服务不需要自动重新启动.")]),e._v(" "),e._m(38),e._v(" "),v("p",[e._v("该模式适合完成获取某个特定结果的操作, 而且该操作能被终止.")]),e._v(" "),v("p",[e._v("当内存紧张的时候可以在迟些时候主动再次调用服务.")]),e._v(" "),v("p",[e._v("这种类型的服务举例如:")]),e._v(" "),v("p",[e._v("从服务器获取数据, 需要设置定时器, 每 n 分钟启动一次服务,")]),e._v(" "),e._m(39),e._v(" "),v("p",[e._v("如果线程终止被 kill 掉, 服务不会自己重新启动, 不会重新调用 onStartCommand.")]),e._v(" "),v("p",[e._v("只有当定时器到时间才会主动再次该启动服务")])])]),e._v(" "),v("hr"),e._v(" "),v("ul",[v("li",[v("p",[v("a",{attrs:{href:"https://developer.android.com/reference/android/app/Service.html#START_STICKY",target:"_blank",rel:"noopener noreferrer"}},[v("code",[e._v("START_STICKY")]),v("OutboundLink")],1),e._v("：")]),e._v(" "),e._m(40),e._v(" "),v("p",[e._v("那么服务会依然保留在启动状态,但原本传递过来的 intent 将被丢失, 稍后系统会重新创建服务,")]),e._v(" "),v("p",[e._v("因为原本服务还在启动状态, 于是新建的服务实例会再次调用 onStartCommand")]),e._v(" "),v("p",[e._v("注意新建服务是需要 intent 对象的, 原本的 intent 在新建服务时是不会被保留的,")]),e._v(" "),e._m(41),e._v(" "),v("p",[e._v("该模式适合在特定时间某个任务是一定启动状态或者停止状态, 比如在后台播放音乐。")])])]),e._v(" "),v("hr"),e._v(" "),v("ul",[v("li",[v("p",[v("a",{attrs:{href:"https://developer.android.com/reference/android/app/Service.html#START_REDELIVER_INTENT",target:"_blank",rel:"noopener noreferrer"}},[v("code",[e._v("START_REDELIVER_INTENT")]),v("OutboundLink")],1),e._v("：")]),e._v(" "),v("p",[e._v("该返回值表示, 当服务启动后 onStartCommand 中新建的线程被 kill 后,")]),e._v(" "),v("p",[e._v("原本的 intent 数据将一直保留, 并且稍后将重新启动服务,直到服务调用 stopSelf 停止服务为止")]),e._v(" "),v("p",[e._v("在原本使用参数 intent 启动后 onStartCommand 中的服务进程没有完成, 没有正常退出的话,")]),e._v(" "),v("p",[e._v("那么则重新启动服务, 所以重启服务时传递的 intent 不是 null, 依然用原来的 intent 重新运行 onStartCommand")])])]),e._v(" "),e._m(42),e._v(" "),v("p",[e._v("startForeground 方法让服务在前台运行, 默认情况下服务是在后台运行的,")]),e._v(" "),v("p",[e._v("这种前台运行模式可以用来显示需要在状态栏持续显示的 notification 通知,")]),e._v(" "),v("p",[e._v("后台运行的服务进程当系统需要的时候可能会被 kill 掉回收内存, 且一般不会有什么不好的影响")]),e._v(" "),v("p",[e._v("而如果你把服务设置成前台运行, 它不会被系统自动回收, 同时如果当前台服务被终止就会打断影响到用户,")]),e._v(" "),v("p",[e._v("比如, 如果将后台运行的音乐设置成前台服务运行, 当该服务被终止, 音乐会停止播放")]),e._v(" "),v("p",[e._v("一些特殊要求必须使用前台服务, 比如, 一些 app 服务在后台更新数据的同时, 还需要在状态栏一直显示一些信息")]),e._v(" "),v("p",[e._v("书 第一行代码中有介绍")]),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),v("p",[e._v("进程间通信有管道, socket, 共享内存等方法, 其中有种方法就是 Binder")]),e._v(" "),v("p",[e._v("安卓中的 Binder 也是进程间通讯的一种方式")]),e._v(" "),v("p",[e._v("比如:")]),e._v(" "),v("p",[e._v("进程 1 要调用进程 2 中的某个方法 , 系统有进程安全限制的,不能直接访问其他进程资源")]),e._v(" "),v("p",[e._v("那么实现方式就是用服务器端和客户端 cs 结构并且结合 binder 来实现进程通信,")]),e._v(" "),v("p",[e._v("流程:")]),e._v(" "),v("p",[e._v("serivce 端定义 binder 接口, 提供的服务暴露出去")]),e._v(" "),v("p",[e._v("client 发送请求")]),e._v(" "),v("p",[e._v("service 端内部方法, 通过建立映射, 让这个映射可以访问到 service 的内部方法,")]),e._v(" "),v("p",[e._v("client 和 service 通过 binder 建立连接后, 都能访问到该映射,于是实现了 client 访问 server 内部方法")]),e._v(" "),v("p",[e._v("调用端就是 client 端,")]),e._v(" "),v("p",[e._v("被调用端就是 service 端,")]),e._v(" "),v("p",[e._v("如果他们是在一个进程内, 那么就是本地服务")]),e._v(" "),v("p",[e._v("如果不是一个进程内就是远程服务, 远程调用")]),e._v(" "),v("p",[e._v("创建 BoundService")]),e._v(" "),v("p",[e._v("必须提供 IBinder , client 将可以通过这个接口来和 service 端交互")]),e._v(" "),v("p",[e._v("可以通过三种方法来提供 IBinder 接口")]),e._v(" "),e._m(45),e._v(" "),e._m(46),e._v(" "),v("p",[e._v("使用 Binder 接口来实现本地服务 Demo")]),e._v(" "),v("p",[e._v("服务端, 在自定义 Service 类中定义内部类继承 Binder 类,")]),e._v(" "),v("p",[e._v("且在这个继承自 Binder 的内部类中, 我们可以定义提供给 client 使用的方法.")]),e._v(" "),v("p",[e._v("客户端, 比如在 Activity 中使用")]),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),v("p",[e._v("ServiceConnection 客户端用来访问 Binder 中提供的方法")]),e._v(" "),e._m(49),e._v(" "),e._m(50),e._v(" "),v("p",[e._v("但这里说的应用退出都是指的按 Back 键退回到桌面")]),e._v(" "),v("p",[e._v("进程的 5 种状态参考 "),v("a",{attrs:{href:"https://www.cnblogs.com/andy-songwei/p/9845771.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("安卓进程五个等级"),v("OutboundLink")],1)]),e._v(" "),e._m(51),e._v(" "),e._m(52),e._v(" "),e._m(53),e._v(" "),e._m(54),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),e._v(" "),v("p",[e._v("如果是按 home 键, 应用进程是 hidden 状态, 那么对服务有没有影响?")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"android-service"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#android-service","aria-hidden":"true"}},[this._v("#")]),this._v(" Android Service")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("http://127.0.0.1:8080/guide/components/services.html")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("https://blog.csdn.net/vanpersie_9987/article/details/51360245")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("mars 视频, 基础")]),this._v(" "),t("li",[this._v("android 文档")]),this._v(" "),t("li",[this._v("Android 高级应用开发课程（1-100） 基础篇 , 这里面的也很不错, b 站")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"service-需掌握的要点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-需掌握的要点","aria-hidden":"true"}},[this._v("#")]),this._v(" Service 需掌握的要点")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ol",[v("li",[v("p",[e._v("service 是什么")]),e._v(" "),v("p",[e._v("在后台执行耗时操作的应用组件就是服务, 它没有用户界面. 文档有答案, 直接看文档")])]),e._v(" "),v("li",[v("p",[e._v("service 不是什么")]),e._v(" "),v("p",[e._v("文档种有答案, 不是新的进程 也不是新的线程, 它是运行在当前进程的, 一般为实现后台运行耗时操作, 在服务里会新开线程")])]),e._v(" "),v("li",[v("p",[e._v("service 生命周期: 不同类型的服务有不同的生命周期 , 见后面笔记")])]),e._v(" "),v("li",[v("p",[e._v("有哪两种 service")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("按启动方式来分类, StartedService 和 BoundService")]),e._v(" "),v("p",[v("strong",[e._v("StartedService")])]),e._v(" "),v("p",[e._v("是通过 startService 来启动服务, 一旦服务启动, 就在后台运行,\n即时启动它的 activiey 对象销毁了, 服务依然在运行,\n并不是进程销毁了服务还在运行, 而是启动对象销毁它还在运行,\n启动服务的进程如果被 kill 服务也会退出的")]),e._v(" "),v("p",[v("strong",[e._v("BoundService")])]),e._v(" "),v("p",[e._v("是通过 bindService 来启动服务, 提供客户端服务接口\n服务可以被多个调用者绑定"),v("br"),e._v("\nActivityA , ActivityB 都绑定服务, 有一个退出, 还有其他 activity 绑定于是服务不会退出, 所有绑定者都退出服务才会退出")]),e._v(" "),v("p",[e._v("unBind()")])]),e._v(" "),v("li",[v("p",[e._v("按服务性质分 localService 和 remoteService\nremoteService , remote 是指不同的进程, 也是 cs 结构")])]),e._v(" "),v("li",[v("p",[e._v("按实现方式来分 java 服务和 native 服务")])])])]),e._v(" "),v("li",[v("p",[e._v("service 和线程的使用的区别")])]),e._v(" "),v("li",[v("p",[e._v("startedService 和 BoundService 区别")])]),e._v(" "),v("li",[v("p",[e._v("service 会新开进程或线程吗")])]),e._v(" "),v("li",[v("p",[e._v("binder 是什么?")]),e._v(" "),v("p",[e._v("binder 原本是 linux 进程间通讯机制, android 在系统 binder 基础上封装后提供给开发者使用, 从而实现 android 下的进程间通信")])]),e._v(" "),v("li",[v("p",[e._v("demo 音乐播放程序, 分别使用 startService 和 bindService")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"service-的生命周期方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-的生命周期方法","aria-hidden":"true"}},[this._v("#")]),this._v(" Service 的生命周期方法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[t("em",[this._v("不同的服务启动类型有不同的生命周期")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("StartedService")]),this._v(" 类型, 指的是通过调用 "),t("code",[this._v("Context.startService()")]),this._v(" 来启动服务")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("BoundService")]),this._v(" 类型, 指的是"),t("code",[this._v("Context.bindService()")]),this._v(" 来启动服务")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"startedservice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#startedservice","aria-hidden":"true"}},[this._v("#")]),this._v(" "),t("code",[this._v("StartedService")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("— "),t("code",[this._v("Context.startService()")]),this._v(" 方式启动")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("onCreate()")]),this._v(" —> "),t("code",[this._v("onStartCommand(Intent, int, int)")]),this._v(" —>")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Context.stopService()")]),this._v(" or "),t("code",[this._v("stopSelf()")]),this._v(" —> "),t("code",[this._v("onStop")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"boundservice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boundservice","aria-hidden":"true"}},[this._v("#")]),this._v(" "),t("code",[this._v("BoundService")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("— "),t("code",[this._v("Context.bindService()")]),this._v(" 方式启动连接到服务")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[v("code",[e._v("onCreate()")]),e._v(" —> "),v("code",[e._v("但不会运行onStartCommand")]),e._v(" —> "),v("code",[e._v("onBind")]),e._v(" -> "),v("code",[e._v("onServiceConnected")]),e._v(" --\x3e "),v("code",[e._v("onUnbind")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("使用 "),t("code",[this._v("bindService")]),this._v(" 启动服务后调用者和服务绑定到了一起，当调用者被销毁，服务也立即结终止。")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[e._v("一旦 unBind 后, "),v("code",[e._v("service")]),e._v(" 还是处于运行状态, 这时再去 "),v("code",[e._v("bind")]),e._v(" 就不会调用 "),v("code",[e._v("onBind")]),e._v(", 而是直接调用 "),v("code",[e._v("onServiceConnected")]),e._v(",")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("既然 "),t("code",[this._v("bind")]),this._v(" 失败那么 "),t("code",[this._v("unbind")]),this._v(" 自然也不会调用了")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[e._v("也就是说 "),v("code",[e._v("bind")]),e._v(", "),v("code",[e._v("unbind")]),e._v(" 启动服务后(调用 "),v("code",[e._v("startService")]),e._v(" 后)只能绑定一次, 只要 "),v("code",[e._v("unbind")]),e._v(" 后 再次 "),v("code",[e._v("bind")]),e._v(" 就不会调用 "),v("code",[e._v("onBind")]),e._v(" 方法")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[e._v("如果某个组件通过调用"),v("code",[e._v("startService()")]),e._v("启动了 Service（系统会回调"),v("code",[e._v("onStartCommand()")]),e._v("方法），那么直到在 Service 中手动调用"),v("code",[e._v("stopSelf()")]),e._v("方法、或在其他组件中手动调用"),v("code",[e._v("stopService()")]),e._v("方法，该 Service 才会停止。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果某个组件通过调用"),t("code",[this._v("bindService()")]),this._v("绑定了 Service（系统不会回调"),t("code",[this._v("onStartCommand()")]),this._v("方法），只要该组件与 Service 处于绑定状态，Service 就会一直运行，当 Service 不再与组件绑定时，该 Service 将被 destroy。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"startedservice-使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#startedservice-使用场景","aria-hidden":"true"}},[this._v("#")]),this._v(" StartedService 使用场景")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("主要也就是生命周期方法 "),t("code",[this._v("onStartCommand")]),this._v(" 的使用场景")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("StartedService")]),this._v(" 类型, 指的是通过调用 "),t("code",[this._v("Context.startService()")]),this._v(" 来启动服务, 一般用来完成某个耗时的功能, 比如 , 下载某个文件,")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("而且这种耗时的操作一般是写在 "),t("code",[this._v("onStartCommand")]),this._v(" 这个方法中新建线程来完成")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("而且它还控制着服务的退出和重新启动, 因此它是 "),t("code",[this._v("StartedService")]),this._v(" 中最重要的生命周期方法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("当然完成这种耗时操作的功能, 还可以通过 "),t("code",[this._v("IntentService")]),this._v(" , 它是官方提供的一个使用范例")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果每次只需要执行一个耗时的操作的话, 用 "),t("code",[this._v("IntentService")]),this._v(" 就挺方便")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果有多个耗时操作那么就需要在 "),t("code",[this._v("onStartCommand")]),this._v(" 方法中自己通过新建线程来实现")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[e._v("当在 "),v("code",[e._v("activiey")]),e._v(" 或其他组件中调用 "),v("code",[e._v("startService")]),e._v(" 方法的时候会触发 "),v("code",[e._v("Service")]),e._v(" 的 "),v("code",[e._v("onStartCommand")]),e._v(" 方法")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[v("code",[e._v("onStartCommand()")]),e._v("：当其他组件调用 "),v("code",[e._v("startService()")]),e._v("方法请求启动 "),v("code",[e._v("Service")]),e._v(" 时，该方法被回调。一旦 "),v("code",[e._v("Service")]),e._v(" 启动，它会在后台独立运行。")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[e._v("当 "),v("code",[e._v("Service")]),e._v(" 执行完以后，需调用 "),v("code",[e._v("stopSelf()")]),e._v(" 或 "),v("code",[e._v("stopService()")]),e._v("方法停止 "),v("code",[e._v("Service。（若您只希望")]),e._v(" "),v("code",[e._v("bind Service")]),e._v("，则无需调用这些方法）")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("总的来说 , 一般情况下, 如果只需要一个耗时的操作的话, 可以使用 IntentService 因为那就是官方提供的对 "),t("code",[this._v("StartedService")]),this._v(" 的使用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果有多个耗时的操作的话, 那就需要直接使用 "),t("code",[this._v("onStartCommand")]),this._v(" 在里面新建多个线程")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"onstartcommand-返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onstartcommand-返回值","aria-hidden":"true"}},[this._v("#")]),this._v(" onStartCommand 返回值")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("onStartCommand()")]),this._v("返回一个 flags 整形变量，该变量必须是下列常量之一")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("执行完"),t("code",[this._v("onStartCommand()")]),this._v("方法后，服务就会被 kill 了 , 在没有再次启动服务前, 该服务就是非启动状态")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("每次启动服务就会调用一次"),t("code",[this._v("onStartCommand")]),this._v(" , 在该方法中新建线程去访问网络")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("若在服务启动后, "),t("code",[this._v("onStartCommand()")]),this._v("执行中的新建的线程如果被终止 kill，")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("除非有 pending intents 传递，否则将使用"),t("code",[this._v("null intent")]),this._v("来创建服务")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"startforeground-前台服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#startforeground-前台服务","aria-hidden":"true"}},[this._v("#")]),this._v(" startForeground 前台服务")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"intentservice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#intentservice","aria-hidden":"true"}},[this._v("#")]),this._v(" IntentService")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"binder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binder","aria-hidden":"true"}},[this._v("#")]),this._v(" Binder")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("扩展 Binder 类 , 在自定义 Service 类中定义内部类继承 Binder 类")]),this._v(" "),t("li",[this._v("使用 Messenger")]),this._v(" "),t("li",[this._v("使用 AIDL")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"本地服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地服务","aria-hidden":"true"}},[this._v("#")]),this._v(" 本地服务")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("bindService(bindIntent, conn, Context.BIND_AUTO_CREATE);")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("来启动服务和建立连接, 其中 conn 是 "),t("code",[this._v("ServiceConnection")]),this._v(" 对象")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"startedservice-和-boundservice-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#startedservice-和-boundservice-区别","aria-hidden":"true"}},[this._v("#")]),this._v(" startedService 和 BoundService 区别")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[t("strong",[this._v("应用退出的情况下两种服务的运行状态不同")])])])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[v("code",[e._v("startedService")]),e._v(" 和 启动它的 "),v("code",[e._v("Activity")]),e._v(" 不会同生共死, 当 "),v("code",[e._v("activity")]),e._v(" 退出了 , "),v("code",[e._v("service")]),e._v(" 依然在运行")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[v("code",[e._v("BoundService")]),e._v(" 和启动它的 "),v("code",[e._v("Acaptivity")]),e._v(" 同生共死 , "),v("code",[e._v("bound")]),e._v(" 在一起了当 "),v("code",[e._v("activity")]),e._v(" 退出了 , "),v("code",[e._v("service")]),e._v(" 也就 "),v("code",[e._v("unbind")]),e._v(" 而且 "),v("code",[e._v("distroy")]),e._v(" 了")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("按 back 键, App 进程如果没有 "),t("code",[this._v("startedService")]),this._v(" 开启，会从一个前台进程转变为一个空进程；")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("对于有 "),t("code",[this._v("startedService")]),this._v(" 运行的情况，和按 "),t("code",[this._v("Home")]),this._v(" 键一样 进入后台进程")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果某个 "),t("code",[this._v("Activity")]),this._v(" 正确实现了生命周期方法，并保存了其当前状态，\n则进程进入后台和切换到前台, 其进程不会对用户体验产生明显影响，因为当用户导航回该 "),t("code",[this._v("Activity")]),this._v(" 时会恢复其所有可见状态。")])},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("p",[e._v("如果是 "),v("code",[e._v("BoundService")]),e._v(" 按 "),v("code",[e._v("back")]),e._v(" 键退回到桌面那么进程进入到空进程状态, 并且 "),v("code",[e._v("BoundService")]),e._v(" 会 "),v("code",[e._v("unbind")]),e._v(" 后 "),v("code",[e._v("distroy")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果进程被关闭了呢? 按多任务键后退出进程, 那么当进程关闭回收内存了, 服务也会随着"),t("code",[this._v("app")]),this._v(" 退出, 那么 "),t("code",[this._v("startedService")]),this._v(" 是会退出的")])}],!1,null,null,null);t.default=i.exports}}]);